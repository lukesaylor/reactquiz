{"version":3,"sources":["images/bgimage.jpg","components/QuestionCard.styles.ts","components/API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","key","disabled","value","onClick","fetchQuizQuestions","Amount","difficulty","a","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","bgimage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0947203c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bgimage.272d6bd8.jpg\";","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1 rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n          correct\n            ? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\n            : !correct && userClicked\n            ? \"linear-gradient(90deg, #ff5656, #c16868)\"\n            : \"linear-gradient(90deg, #56ccff, #6eafb4)\"}\n    };\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\n\n`;\n","import { shuffleArray } from \"../utils\";\n\nlet modifiedEndpoint:string;\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport const setQuizControls = (\n  numberOfQuestions: number,\n   Category: number, \n   Difficulty: Difficulty,\n   ) => {\n     const NOQ = numberOfQuestions || 20;\n     const CAT = Category || null;\n     const DIFF = Difficulty || null;\n     const modifiedEndpoint = `https://opentdb.com/api.php?amount=${NOQ}&category=${CAT}&difficulty=${DIFF}&type=multiple`;\n      return modifiedEndpoint\n     \n   }\n\n\nexport const fetchQuizQuestions = async (\n  Amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = modifiedEndpoint ? (modifiedEndpoint):`https://opentdb.com/api.php?amount=20&difficulty=easy&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","import React from \"react\";\nimport {AnswerObject} from '../App';\nimport  { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className=\"number\">\n      Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }}></p>\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper correct={userAnswer?.correctAnswer === answer} userClicked={userAnswer?.answer === answer} key={answer}>\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","export const shuffleArray = (array: any[]) => \n    [...array].sort(()=> Math.random() - 0.5);","import styled, { createGlobalStyle } from \"styled-components\";\nimport bgimage from \"./images/bgimage.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height:100%;\n        }\n    \n    body {\n        background-image: url(${bgimage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    button {\n        background-color: black;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Roboto';\n        color: black;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    font-family: \"Roboto\";\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    font-weight: 400;\n    text-align: center;\n    margin: 20px;\n    border-radius: 10px;\n    border: 1px solid #87f1ff;\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from \"react\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { fetchQuizQuestions } from \"./components/API\";\nimport { QuestionState, Difficulty } from \"./components/API\";\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\nimport QuizControls from \"./components/QuizControls\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 20;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n \n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  \n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore((prev) => prev + 1);\n\n      const AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, AnswerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>QuizTime</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <div>\n            \n            <button className=\"start\" onClick={startTrivia}>\n              Start\n            </button>\n          </div>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score:{score}</p> : null}\n        {loading ? <p>Loading Questions</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}